#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
####################################################################################################
Author:yangzhushuang
E-mail:yangzs_chi@yeah.net
Edited by Yang Zhishuang at 2019/08/17
The latest version was edited at : 2019/08/17 By:yangzs
####################################################################################################
Description:

    This script  is used to parse the results of hmmscan's in table format.

    Requirement:
			bash
Usage:
    hmmscan_parse.py  inputFile [eval] [coverage]
     eval and coverage are optional, inputFile is required
     e-values default: 1e-10
     coverage default: 0.35
     The inputFile  is  generated by hmmscan  with  --domtblout
     If custom thresholds, e-values and coverage are provided together

    """
import sys 
from subprocess import call



def parse(inputFile,eval,coverage):
    call(
        "cat " + inputFile + "  | grep -v '^#' | awk '{print $1,$3,$4,$6,$13,$16,$17,$18,$19}' | sed 's/ /\t/g' | sort -k 3,3 -k 8n -k 9n | perl -e 'while(<>){chomp;@a=split;next if $a[-1]==$a[-2];push(@{$b{$a[2]}},$_);}foreach(sort keys %b){@a=@{$b{$_}};for($i=0;$i<$#a;$i++){@b=split(/\t/,$a[$i]);@c=split(/\t/,$a[$i+1]);$len1=$b[-1]-$b[-2];$len2=$c[-1]-$c[-2];$len3=$b[-1]-$c[-2];if($len3>0 and ($len3/$len1>0.5 or $len3/$len2>0.5)){if($b[4]<$c[4]){splice(@a,$i+1,1);}else{splice(@a,$i,1);}$i=$i-1;}}foreach(@a){print $_.\"\n\";}}' > temp",
        shell=True)

    with open('temp') as f:
        for line in f:
            row = line.rstrip().split('\t')
            row.append(float(int(row[6]) - int(row[5])) / int(row[1]))
            if float(row[4]) <= eval and float(row[-1]) >= coverage:
                print('\t'.join([str(x) for x in row]))
    call(['rm', 'temp'])

if __name__=='__main__':
    if len(sys.argv) == 2:
        inputFile = sys.argv[1]
        eval = 1e-10
        coverage = 0.35
        parse(inputFile, eval, coverage)
    elif len(sys.argv) == 4:
        inputFile = sys.argv[1]
        eval = float(sys.argv[2])
        coverage = float(sys.argv[3])
        parse(inputFile, eval, coverage)
    else:
        print __doc__
        sys.exit(-1)